{"version":3,"sources":["test.js"],"names":["console","log","t","is","reverseIt","result","removeDups","join","titleIt","vowelCounter","arr","isPrime","forEach","v","true","false"],"mappings":";;;;;AAAA;;;;AACA;;;;;;AACAA,QAAQC,GAAR,CAAY,YAAZ;AACA,mBAAK,kBAAL,EAAyBC,KAAK;AAC5BA,IAAEC,EAAF,CAAK,mBAAIC,SAAJ,CAAc,OAAd,CAAL,EAA6B,OAA7B,EAAsC,6BAAtC;AACAF,IAAEC,EAAF,CAAK,mBAAIC,SAAJ,CAAc,eAAd,CAAL,EAAqC,eAArC,EAAsD,6BAAtD;AACD,CAHD;AAIA,mBAAK,qBAAL,EAA4BF,KAAK;AAC/B,MAAIG,SAAS,mBAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC,EAAwC,CAAxC,EAA2C,CAA3C,CAAf,CAAb;AACAJ,IAAEC,EAAF,CAAKE,OAAOE,IAAP,CAAY,EAAZ,CAAL,EAAsB,QAAtB,EAAgC,4BAAhC;AACD,CAHD;AAIA,mBAAK,gBAAL,EAAuBL,KAAK;AAC1B,MAAIG,SAAS,mBAAIG,OAAJ,CAAY,oCAAZ,CAAb;AACAN,IAAEC,EAAF,CAAKE,MAAL,EAAa,oCAAb,EAAmD,sCAAnD;AACD,CAHD;AAIA,mBAAK,aAAL,EAAoBH,KAAK;AACvB,MAAIG,SAAS,mBAAII,YAAJ,CAAiB,oCAAjB,CAAb;AACAP,IAAEC,EAAF,CAAKE,MAAL,EAAa,EAAb,EAAiB,wDAAjB;AACD,CAHD;AAIA,mBAAK,UAAL,EAAiBH,KAAK;AAAA;AAAA;;AACpB,MAAIQ,MAAM,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B,EAAiC,EAAjC,EAAqC,EAArC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,EAA7D,EAAiE,EAAjE,EAAqE,EAArE,EAAyE,EAAzE,EAA6E,EAA7E,EAAiF,EAAjF,EAAqF,EAArF,EAAyF,EAAzF,EAA6F,EAA7F,EAAiG,GAAjG,EAAsG,GAAtG,CAAV;AACA,MAAIL,SAAS,mBAAIM,OAAJ,CAAY,oCAAZ,CAAb;AACAD,MAAIE,OAAJ,CAAYC,KAAG;AAAA;;AACbX,MAAEY,IAAF,uBAAO,4DAAIH,OAAJ,YAAYE,CAAZ,6BAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAuB,gDAAvB;AACD,GAFD;AAGAX,IAAEa,KAAF,yBAAQ,6DAAIJ,OAAJ,CAAY,CAAZ,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAwB,gDAAxB;AACAT,IAAEa,KAAF,yBAAQ,6DAAIJ,OAAJ,aAAY,CAAC,CAAb,6BAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAyB,gDAAzB;AAED,CATD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"test.js","sourcesContent":["import test from 'ava';\nimport obj from './problems'\nconsole.log('hehehehehe', obj);\ntest('Reversing String', t => {\n  t.is(obj.reverseIt('scott'), 'ttocs', 'String needs to be reversed')\n  t.is(obj.reverseIt('scott is cool'), 'looc si ttocs', 'String needs to be reversed')\n})\ntest('Removing Duplicates', t => {\n  var result = obj.removeDups([1, 2, 2, 3, 2, 4, 5, 3, 4, 5, 4, 3, 1, 2, 6])\n  t.is(result.join(''), '123456', 'Needs to remove duplicates')\n})\ntest('Title Sentence', t => {\n  var result = obj.titleIt('hello, you are very nice and sweet')\n  t.is(result, 'Hello, You Are Very Nice And Sweet', 'Needs to capitalize the first letter')\n})\ntest('Vowel Count', t => {\n  var result = obj.vowelCounter('hello, you are very nice and sweet')\n  t.is(result, 12, 'Needs to give the total Number of vowels in the string')\n})\ntest('Is Prime', t => {\n  var arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103]\n  var result = obj.isPrime('hello, you are very nice and sweet')\n  arr.forEach(v=>{\n    t.true(obj.isPrime(v), 'Needs to return true if Prime and false if not')\n  })\n  t.false(obj.isPrime(4), 'Needs to return true if Prime and false if not')\n  t.false(obj.isPrime(-1), 'Needs to return true if Prime and false if not')\n\n})\n// test('foo', t => {\n// \tt.pass();\n// });\n//\n// test('bar', async t => {\n// \tconst bar = Promise.resolve('bar');\n//\n// \tt.is(await bar, 'bar');\n// });\n"]}