'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _problems = require('./problems');

var _problems2 = _interopRequireDefault(_problems);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

console.log('hehehehehe', _problems2.default);
(0, _ava2.default)('Reversing String', t => {
  t.is(_problems2.default.reverseIt('scott'), 'ttocs', 'String needs to be reversed');
  t.is(_problems2.default.reverseIt('scott is cool'), 'looc si ttocs', 'String needs to be reversed');
});
(0, _ava2.default)('Removing Duplicates', t => {
  var result = _problems2.default.removeDups([1, 2, 2, 3, 2, 4, 5, 3, 4, 5, 4, 3, 1, 2, 6]);
  t.is(result.join(''), '123456', 'Needs to remove duplicates');
});
(0, _ava2.default)('Title Sentence', t => {
  var result = _problems2.default.titleIt('hello, you are very nice and sweet');
  t.is(result, 'Hello, You Are Very Nice And Sweet', 'Needs to capitalize the first letter');
});
(0, _ava2.default)('Vowel Count', t => {
  var result = _problems2.default.vowelCounter('hello, you are very nice and sweet');
  t.is(result, 12, 'Needs to give the total Number of vowels in the string');
});
(0, _ava2.default)('Is Prime', t => {
  var _rec2 = new _powerAssertRecorder(),
      _rec3 = new _powerAssertRecorder();

  var arr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103];
  var result = _problems2.default.isPrime('hello, you are very nice and sweet');
  arr.forEach(v => {
    var _rec = new _powerAssertRecorder();

    t.true(_rec._expr(_rec._capt(_rec._capt(_problems2.default, 'arguments/0/callee/object').isPrime(_rec._capt(v, 'arguments/0/arguments/0')), 'arguments/0'), {
      content: 't.true(obj.isPrime(v), \'Needs to return true if Prime and false if not\')',
      filepath: 'test.js',
      line: 24,
      ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj","range":[7,10]},"property":{"type":"Identifier","name":"isPrime","range":[11,18]},"computed":false,"range":[7,18]},"arguments":[{"type":"Identifier","name":"v","range":[19,20]}],"range":[7,21]},{"type":"StringLiteral","value":"Needs to return true if Prime and false if not","range":[23,71]}],"range":[0,72]}',
      tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"obj","range":[7,10]},{"type":{"label":"."},"range":[10,11]},{"type":{"label":"name"},"value":"isPrime","range":[11,18]},{"type":{"label":"("},"range":[18,19]},{"type":{"label":"name"},"value":"v","range":[19,20]},{"type":{"label":")"},"range":[20,21]},{"type":{"label":","},"range":[21,22]},{"type":{"label":"string"},"value":"Needs to return true if Prime and false if not","range":[23,71]},{"type":{"label":")"},"range":[71,72]}]',
      visitorKeys: _powerAssertVisitorKeys
    }), 'Needs to return true if Prime and false if not');
  });
  t.false(_rec2._expr(_rec2._capt(_rec2._capt(_problems2.default, 'arguments/0/callee/object').isPrime(4), 'arguments/0'), {
    content: 't.false(obj.isPrime(4), \'Needs to return true if Prime and false if not\')',
    filepath: 'test.js',
    line: 26,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"false","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj","range":[8,11]},"property":{"type":"Identifier","name":"isPrime","range":[12,19]},"computed":false,"range":[8,19]},"arguments":[{"type":"NumericLiteral","value":4,"range":[20,21]}],"range":[8,22]},{"type":"StringLiteral","value":"Needs to return true if Prime and false if not","range":[24,72]}],"range":[0,73]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"false"},"value":"false","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"obj","range":[8,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"isPrime","range":[12,19]},{"type":{"label":"("},"range":[19,20]},{"type":{"label":"num"},"value":4,"range":[20,21]},{"type":{"label":")"},"range":[21,22]},{"type":{"label":","},"range":[22,23]},{"type":{"label":"string"},"value":"Needs to return true if Prime and false if not","range":[24,72]},{"type":{"label":")"},"range":[72,73]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Needs to return true if Prime and false if not');
  t.false(_rec3._expr(_rec3._capt(_rec3._capt(_problems2.default, 'arguments/0/callee/object').isPrime(_rec3._capt(-1, 'arguments/0/arguments/0')), 'arguments/0'), {
    content: 't.false(obj.isPrime(-1), \'Needs to return true if Prime and false if not\')',
    filepath: 'test.js',
    line: 27,
    ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"false","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"obj","range":[8,11]},"property":{"type":"Identifier","name":"isPrime","range":[12,19]},"computed":false,"range":[8,19]},"arguments":[{"type":"UnaryExpression","operator":"-","argument":{"type":"NumericLiteral","value":1,"range":[21,22]},"prefix":true,"range":[20,22]}],"range":[8,23]},{"type":"StringLiteral","value":"Needs to return true if Prime and false if not","range":[25,73]}],"range":[0,74]}',
    tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"false"},"value":"false","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"obj","range":[8,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"isPrime","range":[12,19]},{"type":{"label":"("},"range":[19,20]},{"type":{"label":"+/-"},"value":"-","range":[20,21]},{"type":{"label":"num"},"value":1,"range":[21,22]},{"type":{"label":")"},"range":[22,23]},{"type":{"label":","},"range":[23,24]},{"type":{"label":"string"},"value":"Needs to return true if Prime and false if not","range":[25,73]},{"type":{"label":")"},"range":[73,74]}]',
    visitorKeys: _powerAssertVisitorKeys
  }), 'Needs to return true if Prime and false if not');
});
// test('foo', t => {
// 	t.pass();
// });
//
// test('bar', async t => {
// 	const bar = Promise.resolve('bar');
//
// 	t.is(await bar, 'bar');
// });
//# sourceMappingURL=node_modules/.cache/ava/488abb23476f737ef492b2d4296c8ee9.js.map